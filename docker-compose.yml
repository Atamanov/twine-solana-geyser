services:
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    container_name: twine-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: twine_solana_db
      POSTGRES_USER: geyser_writer
      POSTGRES_PASSWORD: geyser_writer_password
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
      TIMESCALEDB_TELEMETRY: "off"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./schema/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - twine-network
    shm_size: 1gb
    command: >
      postgres
      -c shared_preload_libraries=timescaledb,pg_stat_statements
      -c shared_buffers=4GB
      -c effective_cache_size=12GB
      -c work_mem=256MB
      -c maintenance_work_mem=1GB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c wal_buffers=16MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=16
      -c max_parallel_workers_per_gather=8
      -c max_parallel_workers=16
      -c max_parallel_maintenance_workers=4
      -c checkpoint_completion_target=0.9
      -c wal_compression=on
      -c wal_log_hints=on
      -c wal_level=replica
      -c max_wal_senders=0
      -c synchronous_commit=off
      -c full_page_writes=on
      -c checkpoint_timeout=15min
      -c listen_addresses='*'
      -c max_connections=200
      -c superuser_reserved_connections=5
      -c timescaledb.max_background_workers=8
      -c log_line_prefix='%t [%p] %u@%d '
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_duration=off
      -c log_lock_waits=on
      -c log_statement=none
      -c log_timezone='UTC'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U geyser_writer -d twine_solana_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: twine-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - twine-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=30d"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      timescaledb:
        condition: service_healthy

  grafana:
    image: grafana/grafana:11.2.1
    container_name: twine-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel,marcusolsson-json-datasource
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      GF_AUTH_BASIC_ENABLED: "true"
      GF_SMTP_ENABLED: "false"
      GF_LOG_MODE: console
      GF_LOG_LEVEL: info
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - twine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - prometheus
      - timescaledb

  grafana-importer:
    image: alpine/curl
    container_name: twine-grafana-importer
    restart: on-failure
    depends_on:
      grafana:
        condition: service_healthy
    volumes:
      - ./scripts/import-library-panels.sh:/import-library-panels.sh:ro
      - ./config/grafana/provisioning/library_panels:/etc/grafana/provisioning/library_panels:ro
      - ./config/grafana/provisioning/dashboards/main-dashboard.json:/etc/grafana/dashboards_source/main-dashboard.json:ro
      - grafana_data:/var/lib/grafana:rw
    networks:
      - twine-network
    command: >
      sh -c "apk add --no-cache jq && sh /import-library-panels.sh"

  pgadmin:
    image: dpage/pgadmin4:9.0
    container_name: twine-pgadmin
    restart: unless-stopped
    user: "5050:5050"
    environment:
      PGADMIN_DEFAULT_EMAIL: dev@twinelabs.xyz
      PGADMIN_DEFAULT_PASSWORD: Twine202% 2%
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "5050:80"
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./config/pgadmin/pgpass:/tmp/pgpass:ro
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - twine-network
    entrypoint: bash
    command: >
      -c "cp /tmp/pgpass /var/lib/pgadmin/pgpass && chmod 0600 /var/lib/pgadmin/pgpass && /entrypoint.sh"
    depends_on:
      - timescaledb

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: twine-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://geyser_writer:geyser_writer_password@timescaledb:5432/twine_solana_db?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - twine-network
    depends_on:
      timescaledb:
        condition: service_healthy

volumes:
  timescale_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  twine-network:
    external: true
